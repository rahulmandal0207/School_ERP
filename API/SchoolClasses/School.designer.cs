#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolClasses
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SchoolERP")]
	public partial class SchoolDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDesignation(Designation instance);
    partial void UpdateDesignation(Designation instance);
    partial void DeleteDesignation(Designation instance);
    partial void InsertFeeAdmission(FeeAdmission instance);
    partial void UpdateFeeAdmission(FeeAdmission instance);
    partial void DeleteFeeAdmission(FeeAdmission instance);
    partial void InsertFeeAdmissionHead(FeeAdmissionHead instance);
    partial void UpdateFeeAdmissionHead(FeeAdmissionHead instance);
    partial void DeleteFeeAdmissionHead(FeeAdmissionHead instance);
    partial void InsertHead(Head instance);
    partial void UpdateHead(Head instance);
    partial void DeleteHead(Head instance);
    partial void InsertLoginLog(LoginLog instance);
    partial void UpdateLoginLog(LoginLog instance);
    partial void DeleteLoginLog(LoginLog instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPageGroup(PageGroup instance);
    partial void UpdatePageGroup(PageGroup instance);
    partial void DeletePageGroup(PageGroup instance);
    partial void InsertPupilType(PupilType instance);
    partial void UpdatePupilType(PupilType instance);
    partial void DeletePupilType(PupilType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoleMenu(RoleMenu instance);
    partial void UpdateRoleMenu(RoleMenu instance);
    partial void DeleteRoleMenu(RoleMenu instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffLogin(StaffLogin instance);
    partial void UpdateStaffLogin(StaffLogin instance);
    partial void DeleteStaffLogin(StaffLogin instance);
    partial void InsertStaffLoginRole(StaffLoginRole instance);
    partial void UpdateStaffLoginRole(StaffLoginRole instance);
    partial void DeleteStaffLoginRole(StaffLoginRole instance);
    #endregion
		
		public SchoolDataContext() : 
				base(global::SchoolClasses.Properties.Settings.Default.SchoolERPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Designation> Designations
		{
			get
			{
				return this.GetTable<Designation>();
			}
		}
		
		public System.Data.Linq.Table<FeeAdmission> FeeAdmissions
		{
			get
			{
				return this.GetTable<FeeAdmission>();
			}
		}
		
		public System.Data.Linq.Table<FeeAdmissionHead> FeeAdmissionHeads
		{
			get
			{
				return this.GetTable<FeeAdmissionHead>();
			}
		}
		
		public System.Data.Linq.Table<Head> Heads
		{
			get
			{
				return this.GetTable<Head>();
			}
		}
		
		public System.Data.Linq.Table<LoginLog> LoginLogs
		{
			get
			{
				return this.GetTable<LoginLog>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PageGroup> PageGroups
		{
			get
			{
				return this.GetTable<PageGroup>();
			}
		}
		
		public System.Data.Linq.Table<PupilType> PupilTypes
		{
			get
			{
				return this.GetTable<PupilType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RoleMenu> RoleMenus
		{
			get
			{
				return this.GetTable<RoleMenu>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffLogin> StaffLogins
		{
			get
			{
				return this.GetTable<StaffLogin>();
			}
		}
		
		public System.Data.Linq.Table<StaffLoginRole> StaffLoginRoles
		{
			get
			{
				return this.GetTable<StaffLoginRole>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityId;
		
		private int _StateId;
		
		private string _CityName;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntityRef<State> _State;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public City()
		{
			this._State = default(EntityRef<State>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL")]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_City", Storage="_State", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_City", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateId;
		
		private string _StateName;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<City> _Cities;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public State()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_City", Storage="_Cities", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_State", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.States.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private int _ClassNo;
		
		private string _SubClassName;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<FeeAdmissionHead> _FeeAdmissionHeads;
		
		private EntitySet<Section> _Sections;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnClassNoChanging(int value);
    partial void OnClassNoChanged();
    partial void OnSubClassNameChanging(string value);
    partial void OnSubClassNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Class()
		{
			this._FeeAdmissionHeads = new EntitySet<FeeAdmissionHead>(new Action<FeeAdmissionHead>(this.attach_FeeAdmissionHeads), new Action<FeeAdmissionHead>(this.detach_FeeAdmissionHeads));
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassNo", DbType="Int NOT NULL")]
		public int ClassNo
		{
			get
			{
				return this._ClassNo;
			}
			set
			{
				if ((this._ClassNo != value))
				{
					this.OnClassNoChanging(value);
					this.SendPropertyChanging();
					this._ClassNo = value;
					this.SendPropertyChanged("ClassNo");
					this.OnClassNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubClassName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SubClassName
		{
			get
			{
				return this._SubClassName;
			}
			set
			{
				if ((this._SubClassName != value))
				{
					this.OnSubClassNameChanging(value);
					this.SendPropertyChanging();
					this._SubClassName = value;
					this.SendPropertyChanged("SubClassName");
					this.OnSubClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_FeeAdmissionHead", Storage="_FeeAdmissionHeads", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<FeeAdmissionHead> FeeAdmissionHeads
		{
			get
			{
				return this._FeeAdmissionHeads;
			}
			set
			{
				this._FeeAdmissionHeads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Section", Storage="_Sections", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Class", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private string _DepartmentName;
		
		private byte _Status;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public Department()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Staffs", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Designation")]
	public partial class Designation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignationId;
		
		private string _DesignationName;
		
		private byte _Status;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignationIdChanging(int value);
    partial void OnDesignationIdChanged();
    partial void OnDesignationNameChanging(string value);
    partial void OnDesignationNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public Designation()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DesignationId
		{
			get
			{
				return this._DesignationId;
			}
			set
			{
				if ((this._DesignationId != value))
				{
					this.OnDesignationIdChanging(value);
					this.SendPropertyChanging();
					this._DesignationId = value;
					this.SendPropertyChanged("DesignationId");
					this.OnDesignationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DesignationName
		{
			get
			{
				return this._DesignationName;
			}
			set
			{
				if ((this._DesignationName != value))
				{
					this.OnDesignationNameChanging(value);
					this.SendPropertyChanging();
					this._DesignationName = value;
					this.SendPropertyChanged("DesignationName");
					this.OnDesignationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Staff", Storage="_Staffs", ThisKey="DesignationId", OtherKey="DesignationId")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Designation = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Designation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeeAdmission")]
	public partial class FeeAdmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeeAdmissionId;
		
		private int _FeeAdmissionHeadId;
		
		private int _FeeAmount;
		
		private string _Remarks;
		
		private bool _IsActive;
		
		private bool _IsRefundable;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntityRef<FeeAdmissionHead> _FeeAdmissionHead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeeAdmissionIdChanging(int value);
    partial void OnFeeAdmissionIdChanged();
    partial void OnFeeAdmissionHeadIdChanging(int value);
    partial void OnFeeAdmissionHeadIdChanged();
    partial void OnFeeAmountChanging(int value);
    partial void OnFeeAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsRefundableChanging(bool value);
    partial void OnIsRefundableChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public FeeAdmission()
		{
			this._FeeAdmissionHead = default(EntityRef<FeeAdmissionHead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeAdmissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeeAdmissionId
		{
			get
			{
				return this._FeeAdmissionId;
			}
			set
			{
				if ((this._FeeAdmissionId != value))
				{
					this.OnFeeAdmissionIdChanging(value);
					this.SendPropertyChanging();
					this._FeeAdmissionId = value;
					this.SendPropertyChanged("FeeAdmissionId");
					this.OnFeeAdmissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeAdmissionHeadId", DbType="Int NOT NULL")]
		public int FeeAdmissionHeadId
		{
			get
			{
				return this._FeeAdmissionHeadId;
			}
			set
			{
				if ((this._FeeAdmissionHeadId != value))
				{
					if (this._FeeAdmissionHead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeeAdmissionHeadIdChanging(value);
					this.SendPropertyChanging();
					this._FeeAdmissionHeadId = value;
					this.SendPropertyChanged("FeeAdmissionHeadId");
					this.OnFeeAdmissionHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeAmount", DbType="Int NOT NULL")]
		public int FeeAmount
		{
			get
			{
				return this._FeeAmount;
			}
			set
			{
				if ((this._FeeAmount != value))
				{
					this.OnFeeAmountChanging(value);
					this.SendPropertyChanging();
					this._FeeAmount = value;
					this.SendPropertyChanged("FeeAmount");
					this.OnFeeAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRefundable", DbType="Bit NOT NULL")]
		public bool IsRefundable
		{
			get
			{
				return this._IsRefundable;
			}
			set
			{
				if ((this._IsRefundable != value))
				{
					this.OnIsRefundableChanging(value);
					this.SendPropertyChanging();
					this._IsRefundable = value;
					this.SendPropertyChanged("IsRefundable");
					this.OnIsRefundableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeeAdmissionHead_FeeAdmission", Storage="_FeeAdmissionHead", ThisKey="FeeAdmissionHeadId", OtherKey="FeeAdmissionHeadId", IsForeignKey=true)]
		public FeeAdmissionHead FeeAdmissionHead
		{
			get
			{
				return this._FeeAdmissionHead.Entity;
			}
			set
			{
				FeeAdmissionHead previousValue = this._FeeAdmissionHead.Entity;
				if (((previousValue != value) 
							|| (this._FeeAdmissionHead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeeAdmissionHead.Entity = null;
						previousValue.FeeAdmissions.Remove(this);
					}
					this._FeeAdmissionHead.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissions.Add(this);
						this._FeeAdmissionHeadId = value.FeeAdmissionHeadId;
					}
					else
					{
						this._FeeAdmissionHeadId = default(int);
					}
					this.SendPropertyChanged("FeeAdmissionHead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeeAdmissionHead")]
	public partial class FeeAdmissionHead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeeAdmissionHeadId;
		
		private int _HeadId;
		
		private int _SessionId;
		
		private int _ClassId;
		
		private int _PupilTypeId;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<FeeAdmission> _FeeAdmissions;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Head> _Head;
		
		private EntityRef<PupilType> _PupilType;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
		private EntityRef<StaffLogin> _StaffLogin1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeeAdmissionHeadIdChanging(int value);
    partial void OnFeeAdmissionHeadIdChanged();
    partial void OnHeadIdChanging(int value);
    partial void OnHeadIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnPupilTypeIdChanging(int value);
    partial void OnPupilTypeIdChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public FeeAdmissionHead()
		{
			this._FeeAdmissions = new EntitySet<FeeAdmission>(new Action<FeeAdmission>(this.attach_FeeAdmissions), new Action<FeeAdmission>(this.detach_FeeAdmissions));
			this._Class = default(EntityRef<Class>);
			this._Head = default(EntityRef<Head>);
			this._PupilType = default(EntityRef<PupilType>);
			this._Session = default(EntityRef<Session>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			this._StaffLogin1 = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeAdmissionHeadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeeAdmissionHeadId
		{
			get
			{
				return this._FeeAdmissionHeadId;
			}
			set
			{
				if ((this._FeeAdmissionHeadId != value))
				{
					this.OnFeeAdmissionHeadIdChanging(value);
					this.SendPropertyChanging();
					this._FeeAdmissionHeadId = value;
					this.SendPropertyChanged("FeeAdmissionHeadId");
					this.OnFeeAdmissionHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadId", DbType="Int NOT NULL")]
		public int HeadId
		{
			get
			{
				return this._HeadId;
			}
			set
			{
				if ((this._HeadId != value))
				{
					if (this._Head.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadIdChanging(value);
					this.SendPropertyChanging();
					this._HeadId = value;
					this.SendPropertyChanged("HeadId");
					this.OnHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PupilTypeId", DbType="Int NOT NULL")]
		public int PupilTypeId
		{
			get
			{
				return this._PupilTypeId;
			}
			set
			{
				if ((this._PupilTypeId != value))
				{
					if (this._PupilType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPupilTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PupilTypeId = value;
					this.SendPropertyChanged("PupilTypeId");
					this.OnPupilTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeeAdmissionHead_FeeAdmission", Storage="_FeeAdmissions", ThisKey="FeeAdmissionHeadId", OtherKey="FeeAdmissionHeadId")]
		public EntitySet<FeeAdmission> FeeAdmissions
		{
			get
			{
				return this._FeeAdmissions;
			}
			set
			{
				this._FeeAdmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_FeeAdmissionHead", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.FeeAdmissionHeads.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissionHeads.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Head_FeeAdmissionHead", Storage="_Head", ThisKey="HeadId", OtherKey="HeadId", IsForeignKey=true)]
		public Head Head
		{
			get
			{
				return this._Head.Entity;
			}
			set
			{
				Head previousValue = this._Head.Entity;
				if (((previousValue != value) 
							|| (this._Head.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Head.Entity = null;
						previousValue.FeeAdmissionHeads.Remove(this);
					}
					this._Head.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissionHeads.Add(this);
						this._HeadId = value.HeadId;
					}
					else
					{
						this._HeadId = default(int);
					}
					this.SendPropertyChanged("Head");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PupilType_FeeAdmissionHead", Storage="_PupilType", ThisKey="PupilTypeId", OtherKey="PupilTypeId", IsForeignKey=true)]
		public PupilType PupilType
		{
			get
			{
				return this._PupilType.Entity;
			}
			set
			{
				PupilType previousValue = this._PupilType.Entity;
				if (((previousValue != value) 
							|| (this._PupilType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PupilType.Entity = null;
						previousValue.FeeAdmissionHeads.Remove(this);
					}
					this._PupilType.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissionHeads.Add(this);
						this._PupilTypeId = value.PupilTypeId;
					}
					else
					{
						this._PupilTypeId = default(int);
					}
					this.SendPropertyChanged("PupilType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_FeeAdmissionHead", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.FeeAdmissionHeads.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissionHeads.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_FeeAdmissionHead", Storage="_StaffLogin", ThisKey="CreatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.FeeAdmissionHeads.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissionHeads.Add(this);
						this._CreatedBy = value.StaffLoginId;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_FeeAdmissionHead1", Storage="_StaffLogin1", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin1
		{
			get
			{
				return this._StaffLogin1.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin1.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin1.Entity = null;
						previousValue.FeeAdmissionHeads1.Remove(this);
					}
					this._StaffLogin1.Entity = value;
					if ((value != null))
					{
						value.FeeAdmissionHeads1.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeAdmissions(FeeAdmission entity)
		{
			this.SendPropertyChanging();
			entity.FeeAdmissionHead = this;
		}
		
		private void detach_FeeAdmissions(FeeAdmission entity)
		{
			this.SendPropertyChanging();
			entity.FeeAdmissionHead = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Head")]
	public partial class Head : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HeadId;
		
		private string _HeadName;
		
		private bool _IsCompulsory;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<FeeAdmissionHead> _FeeAdmissionHeads;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHeadIdChanging(int value);
    partial void OnHeadIdChanged();
    partial void OnHeadNameChanging(string value);
    partial void OnHeadNameChanged();
    partial void OnIsCompulsoryChanging(bool value);
    partial void OnIsCompulsoryChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Head()
		{
			this._FeeAdmissionHeads = new EntitySet<FeeAdmissionHead>(new Action<FeeAdmissionHead>(this.attach_FeeAdmissionHeads), new Action<FeeAdmissionHead>(this.detach_FeeAdmissionHeads));
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HeadId
		{
			get
			{
				return this._HeadId;
			}
			set
			{
				if ((this._HeadId != value))
				{
					this.OnHeadIdChanging(value);
					this.SendPropertyChanging();
					this._HeadId = value;
					this.SendPropertyChanged("HeadId");
					this.OnHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string HeadName
		{
			get
			{
				return this._HeadName;
			}
			set
			{
				if ((this._HeadName != value))
				{
					this.OnHeadNameChanging(value);
					this.SendPropertyChanging();
					this._HeadName = value;
					this.SendPropertyChanged("HeadName");
					this.OnHeadNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCompulsory", DbType="Bit NOT NULL")]
		public bool IsCompulsory
		{
			get
			{
				return this._IsCompulsory;
			}
			set
			{
				if ((this._IsCompulsory != value))
				{
					this.OnIsCompulsoryChanging(value);
					this.SendPropertyChanging();
					this._IsCompulsory = value;
					this.SendPropertyChanged("IsCompulsory");
					this.OnIsCompulsoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Head_FeeAdmissionHead", Storage="_FeeAdmissionHeads", ThisKey="HeadId", OtherKey="HeadId")]
		public EntitySet<FeeAdmissionHead> FeeAdmissionHeads
		{
			get
			{
				return this._FeeAdmissionHeads;
			}
			set
			{
				this._FeeAdmissionHeads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Head", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Heads.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Heads.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.Head = this;
		}
		
		private void detach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.Head = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginLog")]
	public partial class LoginLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoginLogId;
		
		private string _UserName;
		
		private string _LoginPassword;
		
		private string _ClientBrowser;
		
		private string _LoginDevice;
		
		private string _IPAddress;
		
		private string _ReferrerUrl;
		
		private byte _LoginResult;
		
		private System.DateTime _LoginTime;
		
		private System.DateTime _LastUpdatedOn;
		
		private System.Nullable<byte> _UserType;
		
		private string _GoogleLocation;
		
		private string _IMEINo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginLogIdChanging(int value);
    partial void OnLoginLogIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoginPasswordChanging(string value);
    partial void OnLoginPasswordChanged();
    partial void OnClientBrowserChanging(string value);
    partial void OnClientBrowserChanged();
    partial void OnLoginDeviceChanging(string value);
    partial void OnLoginDeviceChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnReferrerUrlChanging(string value);
    partial void OnReferrerUrlChanged();
    partial void OnLoginResultChanging(byte value);
    partial void OnLoginResultChanged();
    partial void OnLoginTimeChanging(System.DateTime value);
    partial void OnLoginTimeChanged();
    partial void OnLastUpdatedOnChanging(System.DateTime value);
    partial void OnLastUpdatedOnChanged();
    partial void OnUserTypeChanging(System.Nullable<byte> value);
    partial void OnUserTypeChanged();
    partial void OnGoogleLocationChanging(string value);
    partial void OnGoogleLocationChanged();
    partial void OnIMEINoChanging(string value);
    partial void OnIMEINoChanged();
    #endregion
		
		public LoginLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoginLogId
		{
			get
			{
				return this._LoginLogId;
			}
			set
			{
				if ((this._LoginLogId != value))
				{
					this.OnLoginLogIdChanging(value);
					this.SendPropertyChanging();
					this._LoginLogId = value;
					this.SendPropertyChanged("LoginLogId");
					this.OnLoginLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginPassword", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LoginPassword
		{
			get
			{
				return this._LoginPassword;
			}
			set
			{
				if ((this._LoginPassword != value))
				{
					this.OnLoginPasswordChanging(value);
					this.SendPropertyChanging();
					this._LoginPassword = value;
					this.SendPropertyChanged("LoginPassword");
					this.OnLoginPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientBrowser", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ClientBrowser
		{
			get
			{
				return this._ClientBrowser;
			}
			set
			{
				if ((this._ClientBrowser != value))
				{
					this.OnClientBrowserChanging(value);
					this.SendPropertyChanging();
					this._ClientBrowser = value;
					this.SendPropertyChanged("ClientBrowser");
					this.OnClientBrowserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginDevice", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LoginDevice
		{
			get
			{
				return this._LoginDevice;
			}
			set
			{
				if ((this._LoginDevice != value))
				{
					this.OnLoginDeviceChanging(value);
					this.SendPropertyChanging();
					this._LoginDevice = value;
					this.SendPropertyChanged("LoginDevice");
					this.OnLoginDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferrerUrl", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ReferrerUrl
		{
			get
			{
				return this._ReferrerUrl;
			}
			set
			{
				if ((this._ReferrerUrl != value))
				{
					this.OnReferrerUrlChanging(value);
					this.SendPropertyChanging();
					this._ReferrerUrl = value;
					this.SendPropertyChanged("ReferrerUrl");
					this.OnReferrerUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginResult", DbType="TinyInt NOT NULL")]
		public byte LoginResult
		{
			get
			{
				return this._LoginResult;
			}
			set
			{
				if ((this._LoginResult != value))
				{
					this.OnLoginResultChanging(value);
					this.SendPropertyChanging();
					this._LoginResult = value;
					this.SendPropertyChanged("LoginResult");
					this.OnLoginResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime NOT NULL")]
		public System.DateTime LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedOn
		{
			get
			{
				return this._LastUpdatedOn;
			}
			set
			{
				if ((this._LastUpdatedOn != value))
				{
					this.OnLastUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedOn = value;
					this.SendPropertyChanged("LastUpdatedOn");
					this.OnLastUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="TinyInt")]
		public System.Nullable<byte> UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoogleLocation", DbType="NVarChar(250)")]
		public string GoogleLocation
		{
			get
			{
				return this._GoogleLocation;
			}
			set
			{
				if ((this._GoogleLocation != value))
				{
					this.OnGoogleLocationChanging(value);
					this.SendPropertyChanging();
					this._GoogleLocation = value;
					this.SendPropertyChanged("GoogleLocation");
					this.OnGoogleLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMEINo", DbType="NVarChar(150)")]
		public string IMEINo
		{
			get
			{
				return this._IMEINo;
			}
			set
			{
				if ((this._IMEINo != value))
				{
					this.OnIMEINoChanging(value);
					this.SendPropertyChanging();
					this._IMEINo = value;
					this.SendPropertyChanged("IMEINo");
					this.OnIMEINoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuId;
		
		private string _MenuTitle;
		
		private System.Nullable<int> _PageId;
		
		private int _MenuNo;
		
		private System.Nullable<int> _ParentMenuId;
		
		private string _MenuIcon;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<Menu> _Menus;
		
		private EntitySet<RoleMenu> _RoleMenus;
		
		private EntityRef<Menu> _Menu1;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnMenuTitleChanging(string value);
    partial void OnMenuTitleChanged();
    partial void OnPageIdChanging(System.Nullable<int> value);
    partial void OnPageIdChanged();
    partial void OnMenuNoChanging(int value);
    partial void OnMenuNoChanged();
    partial void OnParentMenuIdChanging(System.Nullable<int> value);
    partial void OnParentMenuIdChanged();
    partial void OnMenuIconChanging(string value);
    partial void OnMenuIconChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Menu()
		{
			this._Menus = new EntitySet<Menu>(new Action<Menu>(this.attach_Menus), new Action<Menu>(this.detach_Menus));
			this._RoleMenus = new EntitySet<RoleMenu>(new Action<RoleMenu>(this.attach_RoleMenus), new Action<RoleMenu>(this.detach_RoleMenus));
			this._Menu1 = default(EntityRef<Menu>);
			this._Page = default(EntityRef<Page>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MenuTitle
		{
			get
			{
				return this._MenuTitle;
			}
			set
			{
				if ((this._MenuTitle != value))
				{
					this.OnMenuTitleChanging(value);
					this.SendPropertyChanging();
					this._MenuTitle = value;
					this.SendPropertyChanged("MenuTitle");
					this.OnMenuTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", DbType="Int")]
		public System.Nullable<int> PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuNo", DbType="Int NOT NULL")]
		public int MenuNo
		{
			get
			{
				return this._MenuNo;
			}
			set
			{
				if ((this._MenuNo != value))
				{
					this.OnMenuNoChanging(value);
					this.SendPropertyChanging();
					this._MenuNo = value;
					this.SendPropertyChanged("MenuNo");
					this.OnMenuNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentMenuId", DbType="Int")]
		public System.Nullable<int> ParentMenuId
		{
			get
			{
				return this._ParentMenuId;
			}
			set
			{
				if ((this._ParentMenuId != value))
				{
					if (this._Menu1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentMenuIdChanging(value);
					this.SendPropertyChanging();
					this._ParentMenuId = value;
					this.SendPropertyChanged("ParentMenuId");
					this.OnParentMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuIcon", DbType="NVarChar(255)")]
		public string MenuIcon
		{
			get
			{
				return this._MenuIcon;
			}
			set
			{
				if ((this._MenuIcon != value))
				{
					this.OnMenuIconChanging(value);
					this.SendPropertyChanging();
					this._MenuIcon = value;
					this.SendPropertyChanged("MenuIcon");
					this.OnMenuIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_Menu", Storage="_Menus", ThisKey="MenuId", OtherKey="ParentMenuId")]
		public EntitySet<Menu> Menus
		{
			get
			{
				return this._Menus;
			}
			set
			{
				this._Menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_RoleMenu", Storage="_RoleMenus", ThisKey="MenuId", OtherKey="MenuId")]
		public EntitySet<RoleMenu> RoleMenus
		{
			get
			{
				return this._RoleMenus;
			}
			set
			{
				this._RoleMenus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_Menu", Storage="_Menu1", ThisKey="ParentMenuId", OtherKey="MenuId", IsForeignKey=true)]
		public Menu Menu1
		{
			get
			{
				return this._Menu1.Entity;
			}
			set
			{
				Menu previousValue = this._Menu1.Entity;
				if (((previousValue != value) 
							|| (this._Menu1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu1.Entity = null;
						previousValue.Menus.Remove(this);
					}
					this._Menu1.Entity = value;
					if ((value != null))
					{
						value.Menus.Add(this);
						this._ParentMenuId = value.MenuId;
					}
					else
					{
						this._ParentMenuId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Menu1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_Menu", Storage="_Page", ThisKey="PageId", OtherKey="PageId", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Menus.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Menus.Add(this);
						this._PageId = value.PageId;
					}
					else
					{
						this._PageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Menu", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Menus.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Menus.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu1 = this;
		}
		
		private void detach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu1 = null;
		}
		
		private void attach_RoleMenus(RoleMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_RoleMenus(RoleMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private int _PageGroupId;
		
		private string _PageName;
		
		private string _PageUrl;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<Menu> _Menus;
		
		private EntityRef<PageGroup> _PageGroup;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnPageGroupIdChanging(int value);
    partial void OnPageGroupIdChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnPageUrlChanging(string value);
    partial void OnPageUrlChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Page()
		{
			this._Menus = new EntitySet<Menu>(new Action<Menu>(this.attach_Menus), new Action<Menu>(this.detach_Menus));
			this._PageGroup = default(EntityRef<PageGroup>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageGroupId", DbType="Int NOT NULL")]
		public int PageGroupId
		{
			get
			{
				return this._PageGroupId;
			}
			set
			{
				if ((this._PageGroupId != value))
				{
					if (this._PageGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._PageGroupId = value;
					this.SendPropertyChanged("PageGroupId");
					this.OnPageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PageUrl
		{
			get
			{
				return this._PageUrl;
			}
			set
			{
				if ((this._PageUrl != value))
				{
					this.OnPageUrlChanging(value);
					this.SendPropertyChanging();
					this._PageUrl = value;
					this.SendPropertyChanged("PageUrl");
					this.OnPageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_Menu", Storage="_Menus", ThisKey="PageId", OtherKey="PageId")]
		public EntitySet<Menu> Menus
		{
			get
			{
				return this._Menus;
			}
			set
			{
				this._Menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageGroup_Page", Storage="_PageGroup", ThisKey="PageGroupId", OtherKey="PageGroupId", IsForeignKey=true)]
		public PageGroup PageGroup
		{
			get
			{
				return this._PageGroup.Entity;
			}
			set
			{
				PageGroup previousValue = this._PageGroup.Entity;
				if (((previousValue != value) 
							|| (this._PageGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PageGroup.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._PageGroup.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._PageGroupId = value.PageGroupId;
					}
					else
					{
						this._PageGroupId = default(int);
					}
					this.SendPropertyChanged("PageGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Page", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageGroup")]
	public partial class PageGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageGroupId;
		
		private string _PageGroupName;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<Page> _Pages;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageGroupIdChanging(int value);
    partial void OnPageGroupIdChanged();
    partial void OnPageGroupNameChanging(string value);
    partial void OnPageGroupNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public PageGroup()
		{
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageGroupId
		{
			get
			{
				return this._PageGroupId;
			}
			set
			{
				if ((this._PageGroupId != value))
				{
					this.OnPageGroupIdChanging(value);
					this.SendPropertyChanging();
					this._PageGroupId = value;
					this.SendPropertyChanged("PageGroupId");
					this.OnPageGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageGroupName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PageGroupName
		{
			get
			{
				return this._PageGroupName;
			}
			set
			{
				if ((this._PageGroupName != value))
				{
					this.OnPageGroupNameChanging(value);
					this.SendPropertyChanging();
					this._PageGroupName = value;
					this.SendPropertyChanged("PageGroupName");
					this.OnPageGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageGroup_Page", Storage="_Pages", ThisKey="PageGroupId", OtherKey="PageGroupId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_PageGroup", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.PageGroups.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.PageGroups.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.PageGroup = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.PageGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PupilType")]
	public partial class PupilType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PupilTypeId;
		
		private string _PupilTypeName;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<FeeAdmissionHead> _FeeAdmissionHeads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPupilTypeIdChanging(int value);
    partial void OnPupilTypeIdChanged();
    partial void OnPupilTypeNameChanging(string value);
    partial void OnPupilTypeNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public PupilType()
		{
			this._FeeAdmissionHeads = new EntitySet<FeeAdmissionHead>(new Action<FeeAdmissionHead>(this.attach_FeeAdmissionHeads), new Action<FeeAdmissionHead>(this.detach_FeeAdmissionHeads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PupilTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PupilTypeId
		{
			get
			{
				return this._PupilTypeId;
			}
			set
			{
				if ((this._PupilTypeId != value))
				{
					this.OnPupilTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PupilTypeId = value;
					this.SendPropertyChanged("PupilTypeId");
					this.OnPupilTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PupilTypeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PupilTypeName
		{
			get
			{
				return this._PupilTypeName;
			}
			set
			{
				if ((this._PupilTypeName != value))
				{
					this.OnPupilTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PupilTypeName = value;
					this.SendPropertyChanged("PupilTypeName");
					this.OnPupilTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PupilType_FeeAdmissionHead", Storage="_FeeAdmissionHeads", ThisKey="PupilTypeId", OtherKey="PupilTypeId")]
		public EntitySet<FeeAdmissionHead> FeeAdmissionHeads
		{
			get
			{
				return this._FeeAdmissionHeads;
			}
			set
			{
				this._FeeAdmissionHeads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.PupilType = this;
		}
		
		private void detach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.PupilType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleTitle;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<RoleMenu> _RoleMenus;
		
		private EntitySet<StaffLoginRole> _StaffLoginRoles;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleTitleChanging(string value);
    partial void OnRoleTitleChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Role()
		{
			this._RoleMenus = new EntitySet<RoleMenu>(new Action<RoleMenu>(this.attach_RoleMenus), new Action<RoleMenu>(this.detach_RoleMenus));
			this._StaffLoginRoles = new EntitySet<StaffLoginRole>(new Action<StaffLoginRole>(this.attach_StaffLoginRoles), new Action<StaffLoginRole>(this.detach_StaffLoginRoles));
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string RoleTitle
		{
			get
			{
				return this._RoleTitle;
			}
			set
			{
				if ((this._RoleTitle != value))
				{
					this.OnRoleTitleChanging(value);
					this.SendPropertyChanging();
					this._RoleTitle = value;
					this.SendPropertyChanged("RoleTitle");
					this.OnRoleTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleMenu", Storage="_RoleMenus", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<RoleMenu> RoleMenus
		{
			get
			{
				return this._RoleMenus;
			}
			set
			{
				this._RoleMenus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_StaffLoginRole", Storage="_StaffLoginRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<StaffLoginRole> StaffLoginRoles
		{
			get
			{
				return this._StaffLoginRoles;
			}
			set
			{
				this._StaffLoginRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Role", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleMenus(RoleMenu entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleMenus(RoleMenu entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_StaffLoginRoles(StaffLoginRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_StaffLoginRoles(StaffLoginRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleMenu")]
	public partial class RoleMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleMenuId;
		
		private int _RoleId;
		
		private int _MenuId;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private bool _CanEdit;
		
		private bool _CanDelete;
		
		private bool _CanCreate;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleMenuIdChanging(int value);
    partial void OnRoleMenuIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnCanEditChanging(bool value);
    partial void OnCanEditChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    partial void OnCanCreateChanging(bool value);
    partial void OnCanCreateChanged();
    #endregion
		
		public RoleMenu()
		{
			this._Menu = default(EntityRef<Menu>);
			this._Role = default(EntityRef<Role>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleMenuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleMenuId
		{
			get
			{
				return this._RoleMenuId;
			}
			set
			{
				if ((this._RoleMenuId != value))
				{
					this.OnRoleMenuIdChanging(value);
					this.SendPropertyChanging();
					this._RoleMenuId = value;
					this.SendPropertyChanged("RoleMenuId");
					this.OnRoleMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", DbType="Int NOT NULL")]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit NOT NULL")]
		public bool CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanCreate", DbType="Bit NOT NULL")]
		public bool CanCreate
		{
			get
			{
				return this._CanCreate;
			}
			set
			{
				if ((this._CanCreate != value))
				{
					this.OnCanCreateChanging(value);
					this.SendPropertyChanging();
					this._CanCreate = value;
					this.SendPropertyChanged("CanCreate");
					this.OnCanCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_RoleMenu", Storage="_Menu", ThisKey="MenuId", OtherKey="MenuId", IsForeignKey=true)]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.RoleMenus.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.RoleMenus.Add(this);
						this._MenuId = value.MenuId;
					}
					else
					{
						this._MenuId = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleMenu", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleMenus.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleMenus.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_RoleMenu", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.RoleMenus.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.RoleMenus.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.School")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolId;
		
		private string _SchoolName;
		
		private string _ShortName;
		
		private string _Location;
		
		private string _FullAddress;
		
		private string _SchoolSlogan;
		
		private string _AffiliationDetail;
		
		private int _AffiliationNo;
		
		private string _SchoolCode;
		
		private string _WebsiteUrl;
		
		private string _Email;
		
		private string _MobileNo;
		
		private string _AlternateNo;
		
		private System.Data.Linq.Binary _LogoPng;
		
		private System.Data.Linq.Binary _LogoJpeg;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private byte _Status;
		
		private EntitySet<StaffLogin> _StaffLogins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    partial void OnSchoolNameChanging(string value);
    partial void OnSchoolNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnFullAddressChanging(string value);
    partial void OnFullAddressChanged();
    partial void OnSchoolSloganChanging(string value);
    partial void OnSchoolSloganChanged();
    partial void OnAffiliationDetailChanging(string value);
    partial void OnAffiliationDetailChanged();
    partial void OnAffiliationNoChanging(int value);
    partial void OnAffiliationNoChanged();
    partial void OnSchoolCodeChanging(string value);
    partial void OnSchoolCodeChanged();
    partial void OnWebsiteUrlChanging(string value);
    partial void OnWebsiteUrlChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileNoChanging(string value);
    partial void OnMobileNoChanged();
    partial void OnAlternateNoChanging(string value);
    partial void OnAlternateNoChanged();
    partial void OnLogoPngChanging(System.Data.Linq.Binary value);
    partial void OnLogoPngChanged();
    partial void OnLogoJpegChanging(System.Data.Linq.Binary value);
    partial void OnLogoJpegChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public School()
		{
			this._StaffLogins = new EntitySet<StaffLogin>(new Action<StaffLogin>(this.attach_StaffLogins), new Action<StaffLogin>(this.detach_StaffLogins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SchoolName
		{
			get
			{
				return this._SchoolName;
			}
			set
			{
				if ((this._SchoolName != value))
				{
					this.OnSchoolNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolName = value;
					this.SendPropertyChanged("SchoolName");
					this.OnSchoolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullAddress", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FullAddress
		{
			get
			{
				return this._FullAddress;
			}
			set
			{
				if ((this._FullAddress != value))
				{
					this.OnFullAddressChanging(value);
					this.SendPropertyChanging();
					this._FullAddress = value;
					this.SendPropertyChanged("FullAddress");
					this.OnFullAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolSlogan", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SchoolSlogan
		{
			get
			{
				return this._SchoolSlogan;
			}
			set
			{
				if ((this._SchoolSlogan != value))
				{
					this.OnSchoolSloganChanging(value);
					this.SendPropertyChanging();
					this._SchoolSlogan = value;
					this.SendPropertyChanged("SchoolSlogan");
					this.OnSchoolSloganChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffiliationDetail", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AffiliationDetail
		{
			get
			{
				return this._AffiliationDetail;
			}
			set
			{
				if ((this._AffiliationDetail != value))
				{
					this.OnAffiliationDetailChanging(value);
					this.SendPropertyChanging();
					this._AffiliationDetail = value;
					this.SendPropertyChanged("AffiliationDetail");
					this.OnAffiliationDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffiliationNo", DbType="Int NOT NULL")]
		public int AffiliationNo
		{
			get
			{
				return this._AffiliationNo;
			}
			set
			{
				if ((this._AffiliationNo != value))
				{
					this.OnAffiliationNoChanging(value);
					this.SendPropertyChanging();
					this._AffiliationNo = value;
					this.SendPropertyChanged("AffiliationNo");
					this.OnAffiliationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolCode", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SchoolCode
		{
			get
			{
				return this._SchoolCode;
			}
			set
			{
				if ((this._SchoolCode != value))
				{
					this.OnSchoolCodeChanging(value);
					this.SendPropertyChanging();
					this._SchoolCode = value;
					this.SendPropertyChanged("SchoolCode");
					this.OnSchoolCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string WebsiteUrl
		{
			get
			{
				return this._WebsiteUrl;
			}
			set
			{
				if ((this._WebsiteUrl != value))
				{
					this.OnWebsiteUrlChanging(value);
					this.SendPropertyChanging();
					this._WebsiteUrl = value;
					this.SendPropertyChanged("WebsiteUrl");
					this.OnWebsiteUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateNo", DbType="NVarChar(20)")]
		public string AlternateNo
		{
			get
			{
				return this._AlternateNo;
			}
			set
			{
				if ((this._AlternateNo != value))
				{
					this.OnAlternateNoChanging(value);
					this.SendPropertyChanging();
					this._AlternateNo = value;
					this.SendPropertyChanged("AlternateNo");
					this.OnAlternateNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPng", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LogoPng
		{
			get
			{
				return this._LogoPng;
			}
			set
			{
				if ((this._LogoPng != value))
				{
					this.OnLogoPngChanging(value);
					this.SendPropertyChanging();
					this._LogoPng = value;
					this.SendPropertyChanged("LogoPng");
					this.OnLogoPngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoJpeg", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LogoJpeg
		{
			get
			{
				return this._LogoJpeg;
			}
			set
			{
				if ((this._LogoJpeg != value))
				{
					this.OnLogoJpegChanging(value);
					this.SendPropertyChanging();
					this._LogoJpeg = value;
					this.SendPropertyChanged("LogoJpeg");
					this.OnLogoJpegChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_StaffLogin", Storage="_StaffLogins", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<StaffLogin> StaffLogins
		{
			get
			{
				return this._StaffLogins;
			}
			set
			{
				this._StaffLogins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffLogins(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_StaffLogins(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionId;
		
		private int _ClassId;
		
		private string _SectionName;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Section()
		{
			this._Class = default(EntityRef<Class>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SectionName
		{
			get
			{
				return this._SectionName;
			}
			set
			{
				if ((this._SectionName != value))
				{
					this.OnSectionNameChanging(value);
					this.SendPropertyChanging();
					this._SectionName = value;
					this.SendPropertyChanged("SectionName");
					this.OnSectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Section", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Section", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionId;
		
		private string _SessionName;
		
		private System.DateTime _SessionStartDate;
		
		private System.DateTime _SessionEndDate;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<FeeAdmissionHead> _FeeAdmissionHeads;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnSessionNameChanging(string value);
    partial void OnSessionNameChanged();
    partial void OnSessionStartDateChanging(System.DateTime value);
    partial void OnSessionStartDateChanged();
    partial void OnSessionEndDateChanging(System.DateTime value);
    partial void OnSessionEndDateChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Session()
		{
			this._FeeAdmissionHeads = new EntitySet<FeeAdmissionHead>(new Action<FeeAdmissionHead>(this.attach_FeeAdmissionHeads), new Action<FeeAdmissionHead>(this.detach_FeeAdmissionHeads));
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SessionName
		{
			get
			{
				return this._SessionName;
			}
			set
			{
				if ((this._SessionName != value))
				{
					this.OnSessionNameChanging(value);
					this.SendPropertyChanging();
					this._SessionName = value;
					this.SendPropertyChanged("SessionName");
					this.OnSessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime SessionStartDate
		{
			get
			{
				return this._SessionStartDate;
			}
			set
			{
				if ((this._SessionStartDate != value))
				{
					this.OnSessionStartDateChanging(value);
					this.SendPropertyChanging();
					this._SessionStartDate = value;
					this.SendPropertyChanged("SessionStartDate");
					this.OnSessionStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime SessionEndDate
		{
			get
			{
				return this._SessionEndDate;
			}
			set
			{
				if ((this._SessionEndDate != value))
				{
					this.OnSessionEndDateChanging(value);
					this.SendPropertyChanging();
					this._SessionEndDate = value;
					this.SendPropertyChanged("SessionEndDate");
					this.OnSessionEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_FeeAdmissionHead", Storage="_FeeAdmissionHeads", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<FeeAdmissionHead> FeeAdmissionHeads
		{
			get
			{
				return this._FeeAdmissionHeads;
			}
			set
			{
				this._FeeAdmissionHeads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Session", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffId;
		
		private string _StaffName;
		
		private string _StaffCode;
		
		private int _DesignationId;
		
		private byte _StaffType;
		
		private string _FatherName;
		
		private string _MobileNo;
		
		private string _AlternateNo;
		
		private string _Email;
		
		private byte _Gender;
		
		private string _StaffPhoto;
		
		private string _Qualification;
		
		private string _FullAddress;
		
		private System.DateTime _JoinDate;
		
		private int _DepartmentId;
		
		private byte _Status;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.DateTime _DOB;
		
		private EntitySet<StaffLogin> _StaffLogins;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Designation> _Designation;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnStaffCodeChanging(string value);
    partial void OnStaffCodeChanged();
    partial void OnDesignationIdChanging(int value);
    partial void OnDesignationIdChanged();
    partial void OnStaffTypeChanging(byte value);
    partial void OnStaffTypeChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnMobileNoChanging(string value);
    partial void OnMobileNoChanged();
    partial void OnAlternateNoChanging(string value);
    partial void OnAlternateNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGenderChanging(byte value);
    partial void OnGenderChanged();
    partial void OnStaffPhotoChanging(string value);
    partial void OnStaffPhotoChanged();
    partial void OnQualificationChanging(string value);
    partial void OnQualificationChanged();
    partial void OnFullAddressChanging(string value);
    partial void OnFullAddressChanged();
    partial void OnJoinDateChanging(System.DateTime value);
    partial void OnJoinDateChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    #endregion
		
		public Staff()
		{
			this._StaffLogins = new EntitySet<StaffLogin>(new Action<StaffLogin>(this.attach_StaffLogins), new Action<StaffLogin>(this.detach_StaffLogins));
			this._Department = default(EntityRef<Department>);
			this._Designation = default(EntityRef<Designation>);
			this._StaffLogin = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffCode", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string StaffCode
		{
			get
			{
				return this._StaffCode;
			}
			set
			{
				if ((this._StaffCode != value))
				{
					this.OnStaffCodeChanging(value);
					this.SendPropertyChanging();
					this._StaffCode = value;
					this.SendPropertyChanged("StaffCode");
					this.OnStaffCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationId", DbType="Int NOT NULL")]
		public int DesignationId
		{
			get
			{
				return this._DesignationId;
			}
			set
			{
				if ((this._DesignationId != value))
				{
					if (this._Designation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignationIdChanging(value);
					this.SendPropertyChanging();
					this._DesignationId = value;
					this.SendPropertyChanged("DesignationId");
					this.OnDesignationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffType", DbType="TinyInt NOT NULL")]
		public byte StaffType
		{
			get
			{
				return this._StaffType;
			}
			set
			{
				if ((this._StaffType != value))
				{
					this.OnStaffTypeChanging(value);
					this.SendPropertyChanging();
					this._StaffType = value;
					this.SendPropertyChanged("StaffType");
					this.OnStaffTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateNo", DbType="NVarChar(255)")]
		public string AlternateNo
		{
			get
			{
				return this._AlternateNo;
			}
			set
			{
				if ((this._AlternateNo != value))
				{
					this.OnAlternateNoChanging(value);
					this.SendPropertyChanging();
					this._AlternateNo = value;
					this.SendPropertyChanged("AlternateNo");
					this.OnAlternateNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="TinyInt NOT NULL")]
		public byte Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffPhoto", DbType="NVarChar(150)")]
		public string StaffPhoto
		{
			get
			{
				return this._StaffPhoto;
			}
			set
			{
				if ((this._StaffPhoto != value))
				{
					this.OnStaffPhotoChanging(value);
					this.SendPropertyChanging();
					this._StaffPhoto = value;
					this.SendPropertyChanged("StaffPhoto");
					this.OnStaffPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qualification", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Qualification
		{
			get
			{
				return this._Qualification;
			}
			set
			{
				if ((this._Qualification != value))
				{
					this.OnQualificationChanging(value);
					this.SendPropertyChanging();
					this._Qualification = value;
					this.SendPropertyChanged("Qualification");
					this.OnQualificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullAddress", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FullAddress
		{
			get
			{
				return this._FullAddress;
			}
			set
			{
				if ((this._FullAddress != value))
				{
					this.OnFullAddressChanging(value);
					this.SendPropertyChanging();
					this._FullAddress = value;
					this.SendPropertyChanged("FullAddress");
					this.OnFullAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="DateTime NOT NULL")]
		public System.DateTime JoinDate
		{
			get
			{
				return this._JoinDate;
			}
			set
			{
				if ((this._JoinDate != value))
				{
					this.OnJoinDateChanging(value);
					this.SendPropertyChanging();
					this._JoinDate = value;
					this.SendPropertyChanged("JoinDate");
					this.OnJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffLogin", Storage="_StaffLogins", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<StaffLogin> StaffLogins
		{
			get
			{
				return this._StaffLogins;
			}
			set
			{
				this._StaffLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Staff", Storage="_Designation", ThisKey="DesignationId", OtherKey="DesignationId", IsForeignKey=true)]
		public Designation Designation
		{
			get
			{
				return this._Designation.Entity;
			}
			set
			{
				Designation previousValue = this._Designation.Entity;
				if (((previousValue != value) 
							|| (this._Designation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designation.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Designation.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._DesignationId = value.DesignationId;
					}
					else
					{
						this._DesignationId = default(int);
					}
					this.SendPropertyChanged("Designation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Staff", Storage="_StaffLogin", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffLogins(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_StaffLogins(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffLogin")]
	public partial class StaffLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffLoginId;
		
		private int _StaffId;
		
		private string _UserName;
		
		private string _LoginPassword;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private int _SchoolId;
		
		private byte _Status;
		
		private EntitySet<City> _Cities;
		
		private EntitySet<State> _States;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<FeeAdmissionHead> _FeeAdmissionHeads;
		
		private EntitySet<FeeAdmissionHead> _FeeAdmissionHeads1;
		
		private EntitySet<Head> _Heads;
		
		private EntitySet<Menu> _Menus;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<PageGroup> _PageGroups;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<RoleMenu> _RoleMenus;
		
		private EntitySet<Section> _Sections;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<StaffLogin> _StaffLogins;
		
		private EntitySet<StaffLogin> _StaffLogins1;
		
		private EntitySet<StaffLoginRole> _StaffLoginRoles;
		
		private EntitySet<StaffLoginRole> _StaffLoginRoles1;
		
		private EntityRef<School> _School;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<StaffLogin> _StaffLogin1;
		
		private EntityRef<StaffLogin> _StaffLogin2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffLoginIdChanging(int value);
    partial void OnStaffLoginIdChanged();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoginPasswordChanging(string value);
    partial void OnLoginPasswordChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public StaffLogin()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._FeeAdmissionHeads = new EntitySet<FeeAdmissionHead>(new Action<FeeAdmissionHead>(this.attach_FeeAdmissionHeads), new Action<FeeAdmissionHead>(this.detach_FeeAdmissionHeads));
			this._FeeAdmissionHeads1 = new EntitySet<FeeAdmissionHead>(new Action<FeeAdmissionHead>(this.attach_FeeAdmissionHeads1), new Action<FeeAdmissionHead>(this.detach_FeeAdmissionHeads1));
			this._Heads = new EntitySet<Head>(new Action<Head>(this.attach_Heads), new Action<Head>(this.detach_Heads));
			this._Menus = new EntitySet<Menu>(new Action<Menu>(this.attach_Menus), new Action<Menu>(this.detach_Menus));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._PageGroups = new EntitySet<PageGroup>(new Action<PageGroup>(this.attach_PageGroups), new Action<PageGroup>(this.detach_PageGroups));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._RoleMenus = new EntitySet<RoleMenu>(new Action<RoleMenu>(this.attach_RoleMenus), new Action<RoleMenu>(this.detach_RoleMenus));
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._StaffLogins = new EntitySet<StaffLogin>(new Action<StaffLogin>(this.attach_StaffLogins), new Action<StaffLogin>(this.detach_StaffLogins));
			this._StaffLogins1 = new EntitySet<StaffLogin>(new Action<StaffLogin>(this.attach_StaffLogins1), new Action<StaffLogin>(this.detach_StaffLogins1));
			this._StaffLoginRoles = new EntitySet<StaffLoginRole>(new Action<StaffLoginRole>(this.attach_StaffLoginRoles), new Action<StaffLoginRole>(this.detach_StaffLoginRoles));
			this._StaffLoginRoles1 = new EntitySet<StaffLoginRole>(new Action<StaffLoginRole>(this.attach_StaffLoginRoles1), new Action<StaffLoginRole>(this.detach_StaffLoginRoles1));
			this._School = default(EntityRef<School>);
			this._Staff = default(EntityRef<Staff>);
			this._StaffLogin1 = default(EntityRef<StaffLogin>);
			this._StaffLogin2 = default(EntityRef<StaffLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffLoginId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffLoginId
		{
			get
			{
				return this._StaffLoginId;
			}
			set
			{
				if ((this._StaffLoginId != value))
				{
					this.OnStaffLoginIdChanging(value);
					this.SendPropertyChanging();
					this._StaffLoginId = value;
					this.SendPropertyChanged("StaffLoginId");
					this.OnStaffLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="Int NOT NULL")]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginPassword", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LoginPassword
		{
			get
			{
				return this._LoginPassword;
			}
			set
			{
				if ((this._LoginPassword != value))
				{
					this.OnLoginPasswordChanging(value);
					this.SendPropertyChanging();
					this._LoginPassword = value;
					this.SendPropertyChanged("LoginPassword");
					this.OnLoginPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._StaffLogin2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_City", Storage="_Cities", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_State", Storage="_States", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Class", Storage="_Classes", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_FeeAdmissionHead", Storage="_FeeAdmissionHeads", ThisKey="StaffLoginId", OtherKey="CreatedBy")]
		public EntitySet<FeeAdmissionHead> FeeAdmissionHeads
		{
			get
			{
				return this._FeeAdmissionHeads;
			}
			set
			{
				this._FeeAdmissionHeads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_FeeAdmissionHead1", Storage="_FeeAdmissionHeads1", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<FeeAdmissionHead> FeeAdmissionHeads1
		{
			get
			{
				return this._FeeAdmissionHeads1;
			}
			set
			{
				this._FeeAdmissionHeads1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Head", Storage="_Heads", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Head> Heads
		{
			get
			{
				return this._Heads;
			}
			set
			{
				this._Heads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Menu", Storage="_Menus", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Menu> Menus
		{
			get
			{
				return this._Menus;
			}
			set
			{
				this._Menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Page", Storage="_Pages", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_PageGroup", Storage="_PageGroups", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<PageGroup> PageGroups
		{
			get
			{
				return this._PageGroups;
			}
			set
			{
				this._PageGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Role", Storage="_Roles", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_RoleMenu", Storage="_RoleMenus", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<RoleMenu> RoleMenus
		{
			get
			{
				return this._RoleMenus;
			}
			set
			{
				this._RoleMenus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Section", Storage="_Sections", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Session", Storage="_Sessions", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_Staff", Storage="_Staffs", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLogin", Storage="_StaffLogins", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<StaffLogin> StaffLogins
		{
			get
			{
				return this._StaffLogins;
			}
			set
			{
				this._StaffLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLogin1", Storage="_StaffLogins1", ThisKey="StaffLoginId", OtherKey="CreatedBy")]
		public EntitySet<StaffLogin> StaffLogins1
		{
			get
			{
				return this._StaffLogins1;
			}
			set
			{
				this._StaffLogins1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLoginRole", Storage="_StaffLoginRoles", ThisKey="StaffLoginId", OtherKey="StaffLoginId")]
		public EntitySet<StaffLoginRole> StaffLoginRoles
		{
			get
			{
				return this._StaffLoginRoles;
			}
			set
			{
				this._StaffLoginRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLoginRole1", Storage="_StaffLoginRoles1", ThisKey="StaffLoginId", OtherKey="UpdatedBy")]
		public EntitySet<StaffLoginRole> StaffLoginRoles1
		{
			get
			{
				return this._StaffLoginRoles1;
			}
			set
			{
				this._StaffLoginRoles1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_StaffLogin", Storage="_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.StaffLogins.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.StaffLogins.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffLogin", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.StaffLogins.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.StaffLogins.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLogin", Storage="_StaffLogin1", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin1
		{
			get
			{
				return this._StaffLogin1.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin1.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin1.Entity = null;
						previousValue.StaffLogins.Remove(this);
					}
					this._StaffLogin1.Entity = value;
					if ((value != null))
					{
						value.StaffLogins.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLogin1", Storage="_StaffLogin2", ThisKey="CreatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin2
		{
			get
			{
				return this._StaffLogin2.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin2.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin2.Entity = null;
						previousValue.StaffLogins1.Remove(this);
					}
					this._StaffLogin2.Entity = value;
					if ((value != null))
					{
						value.StaffLogins1.Add(this);
						this._CreatedBy = value.StaffLoginId;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_FeeAdmissionHeads(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_FeeAdmissionHeads1(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin1 = this;
		}
		
		private void detach_FeeAdmissionHeads1(FeeAdmissionHead entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin1 = null;
		}
		
		private void attach_Heads(Head entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Heads(Head entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_PageGroups(PageGroup entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_PageGroups(PageGroup entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_RoleMenus(RoleMenu entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_RoleMenus(RoleMenu entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_StaffLogins(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin1 = this;
		}
		
		private void detach_StaffLogins(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin1 = null;
		}
		
		private void attach_StaffLogins1(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin2 = this;
		}
		
		private void detach_StaffLogins1(StaffLogin entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin2 = null;
		}
		
		private void attach_StaffLoginRoles(StaffLoginRole entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = this;
		}
		
		private void detach_StaffLoginRoles(StaffLoginRole entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin = null;
		}
		
		private void attach_StaffLoginRoles1(StaffLoginRole entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin1 = this;
		}
		
		private void detach_StaffLoginRoles1(StaffLoginRole entity)
		{
			this.SendPropertyChanging();
			entity.StaffLogin1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffLoginRole")]
	public partial class StaffLoginRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffLoginRoleId;
		
		private int _StaffLoginId;
		
		private int _RoleId;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntityRef<StaffLogin> _StaffLogin;
		
		private EntityRef<StaffLogin> _StaffLogin1;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffLoginRoleIdChanging(int value);
    partial void OnStaffLoginRoleIdChanged();
    partial void OnStaffLoginIdChanging(int value);
    partial void OnStaffLoginIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public StaffLoginRole()
		{
			this._StaffLogin = default(EntityRef<StaffLogin>);
			this._StaffLogin1 = default(EntityRef<StaffLogin>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffLoginRoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffLoginRoleId
		{
			get
			{
				return this._StaffLoginRoleId;
			}
			set
			{
				if ((this._StaffLoginRoleId != value))
				{
					this.OnStaffLoginRoleIdChanging(value);
					this.SendPropertyChanging();
					this._StaffLoginRoleId = value;
					this.SendPropertyChanged("StaffLoginRoleId");
					this.OnStaffLoginRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffLoginId", DbType="Int NOT NULL")]
		public int StaffLoginId
		{
			get
			{
				return this._StaffLoginId;
			}
			set
			{
				if ((this._StaffLoginId != value))
				{
					if (this._StaffLogin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffLoginIdChanging(value);
					this.SendPropertyChanging();
					this._StaffLoginId = value;
					this.SendPropertyChanged("StaffLoginId");
					this.OnStaffLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._StaffLogin1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLoginRole", Storage="_StaffLogin", ThisKey="StaffLoginId", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin
		{
			get
			{
				return this._StaffLogin.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin.Entity = null;
						previousValue.StaffLoginRoles.Remove(this);
					}
					this._StaffLogin.Entity = value;
					if ((value != null))
					{
						value.StaffLoginRoles.Add(this);
						this._StaffLoginId = value.StaffLoginId;
					}
					else
					{
						this._StaffLoginId = default(int);
					}
					this.SendPropertyChanged("StaffLogin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffLogin_StaffLoginRole1", Storage="_StaffLogin1", ThisKey="UpdatedBy", OtherKey="StaffLoginId", IsForeignKey=true)]
		public StaffLogin StaffLogin1
		{
			get
			{
				return this._StaffLogin1.Entity;
			}
			set
			{
				StaffLogin previousValue = this._StaffLogin1.Entity;
				if (((previousValue != value) 
							|| (this._StaffLogin1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffLogin1.Entity = null;
						previousValue.StaffLoginRoles1.Remove(this);
					}
					this._StaffLogin1.Entity = value;
					if ((value != null))
					{
						value.StaffLoginRoles1.Add(this);
						this._UpdatedBy = value.StaffLoginId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("StaffLogin1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_StaffLoginRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.StaffLoginRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.StaffLoginRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
